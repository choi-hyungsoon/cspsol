
---------------------------------------------------------------------
		cspsol: Release Notes
---------------------------------------------------------------------

---------------------------------------------------------------------
Date: Friday, 22 August 2008. Version 0.7 Released.

This release contains a bug fix and new features for users and developers.

1. Uninitialized variable caused a bug in last version. Fixed it.
Thanks to Guillaume Jacquenot for bug reports and patience.

2. Henry Palonen completed XML solution report feature.
Related command line option '--oxml filename' was introduced in last version.
Thanks Henry.

3. For developers interested in testing cspsol against different test
cases, added new feature do make this easy.

New command line option '--test filename' runs all test cases specified
in the test specification file 'filename'. The filename format is:

N
order-data-file-name1 expected_opt_value1
order-data-file-name2 expected_opt_value2
order-data-file-nameN expected_opt_valueN
 
where N is number of test cases. Sample test specs file and test cases
can be found in directory cspsol/data. 

$ cat allcases.txt 
6
case1.txt 2
case2.txt 32
case3.txt 15
case4.txt 18
case5.txt 9
case6.txt 4
$
$ cspsol --test allcases.txt.
Solving testcase no. 1... Done. 
Testcase: 1 Expected = 2, Actual = 2 PASS

Solving testcase no. 2... Done. 
Testcase: 2 Expected = 32, Actual = 32 PASS

Solving testcase no. 3... Done. 
Testcase: 3 Expected = 15, Actual = 15 PASS

Solving testcase no. 4... Done. 
Testcase: 4 Expected = 18, Actual = 18 PASS

Solving testcase no. 5... Done. 
Testcase: 5 Expected = 9, Actual = 9 PASS

Solving testcase no. 6... Done. 
Testcase: 6 Expected = 4, Actual = 4 PASS

---------------------------------------------------------------------
Date: Wednesday, 20 August 2008. Version 0.6 Released.

Contains new features.

1. Added new command line options --silent, --otext, --oxml.
Options --otext and --oxml can be used to generate output solution 
report in text and xml formats. 

2. If input file name is 'stdin' then input is read from standard
input. For example:

$cat input.txt | cspsol -d stdin

3. For options, --otext, --oxml, if output file name is 'stdout' 
then solution report is printed to standard output.

4. Option will --silent will not print any progress messages on
standard output. However if options --otext or --oxml specify 'stdout' as 
filename then solution will be printed on standard output.

5. By default (cspsol -d input.txt), progress messages and solution report 
are printed to standard output.

---------------------------------------------------------------------
Date: Monday, 18 August 2008. Version 0.5 Released.

This release contains a long term solution to fix issue:
http://code.google.com/p/cspsol/issues/detail?id=1

The subproblem (knapsack problem) is now solved by dynamic programming (DP)
algorithm. Quality of solution is given importance over total runtime. 
Having access to all optimal integer solutions (which are used to generate 
a new pattern) obtained using DP solves the issue.

In the input data file, order widths and max. order width must be INTEGERs, in
order for DP algorithm to work correctly. By default, this version does not
require any modifications to GLPK source code.

[Testcase]

$ cspsol -d o1.txt 

Reading order data from file o1.txt
Total orders read from file = 2
2000 4
1000 4
Add order demand constraints. Total rows, cols = 2, 0
Added initial patterns. Total rows, cols = 2, 2
Node    1: new patterns =    4 Obj Func Value = 2 Branch.
Node    2: new patterns =    0 Obj Func Value = 2.33333 Branch.
Node    3: new patterns =    0 Obj Func Value = 2 INTEGER ***
Node    4: new patterns =    0 Obj Func Value = 3 INTEGER ***
Node    5: new patterns =    0 LP worse than integer incumbent 2.5 >= 2. Fathom node. 

Branch and bound tree exhausted.

 # Solution Report # 

Best integer obj. func. value = 2
Pattern count =    1:  2000 x  3, 
Pattern count =    1:  2000 x  1,  1000 x  4, 

# Total runtime = 0 Secs

[End Testcase]

To solve subproblem using GLPK glp_int, instead of DP, new commandline option 
--subintopt (--si) is introduced.

$ cspsol --subintopt -d o1.txt

To use option --wa, you must use patched GLPK lib which allows -ve tol_obj.

$ cspsol --subintopt --wa -d o1.txt

Type 'cspsol --help' for viewing changed help information.

---------------------------------------------------------------------
Date: Thursday, 14 August 2008. Version 0.4 Released.

This release contains a workaound to solve issue described here:
http://code.google.com/p/cspsol/issues/detail?id=1

Workaround is disable by default. To enable use of commandline flag
--wa is needed.

Workaound is dependant on following code change in GLPK source code.

Comment out following segment of the code in GLPK, compile and build.
Function: int glp_intopt(glp_prob *mip, const glp_iocp *parm)
File: glpapi08.c
if (!(0.0 < parm->tol_obj && parm->tol_obj < 1.0))
	xfault("glp_intopt: tol_obj = %g; invalid parameter\n",
						parm->tol_obj);


# Example

$ cat o1.txt 
6000
2000 4
1000 4

$ cspsol --wa --data o1.txt 
Reading order data from file o1.txt
Total orders read from file = 2
2000 4
1000 4
Add order demand constraints. Total rows, cols = 2, 0
Added initial patterns. Total rows, cols = 2, 2
Node    1: new patterns =    3 Obj Func Value = 2 Branch.
Node    2: new patterns =    0 Obj Func Value = 2.33333 Branch.
Node    3: new patterns =    0 Obj Func Value = 2 INTEGER ***
Node    4: new patterns =    0 Obj Func Value = 3 INTEGER ***
Node    5: new patterns =    0 LP worse than integer incumbent 2.5 >= 2. Fathom node. 

Branch and bound tree exhausted.

 # Solution Report # 

Best integer obj. func. value = 2
Pattern count =    2:  2000 x  2,  1000 x  2, 

# Total runtime = 0 Secs

---------------------------------------------------------------------
